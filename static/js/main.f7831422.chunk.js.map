{"version":3,"sources":["WeatherInfo.js","apis/weatherapi.js","ZipBar.js","NavBar.js","index.js"],"names":["WeatherInfo","props","kelvin","parseInt","temp","react_default","a","createElement","id","className","city","type","Math","round","axios","create","baseURL","ZipBar","state","zip","onFormSubmit","event","preventDefault","_this","onSubmit","_this2","this","value","onChange","e","setState","target","minLength","maxLength","React","Component","NavBar","onClick","App","err","onSearchSubmit","_callee","response","regenerator_default","wrap","_context","prev","next","omw","get","params","APPID","process","sent","data","main","name","weather","console","log","stop","src_ZipBar","isNaN","src_WeatherInfo","src_NavBar","renderContent","ReactDOM","render","src_App","document","querySelector"],"mappings":"wTAwBeA,SAlBK,SAAEC,GAClB,IAAMC,EAASC,SAASF,EAAMG,KAAM,IAMpC,OACIC,EAAAC,EAAAC,cAAA,OAAKC,GAAG,WACJH,EAAAC,EAAAC,cAAA,MAAIE,UAAU,QAAQR,EAAMS,MAC5BL,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,SAAIN,EAAMU,KACVN,EAAAC,EAAAC,cAAA,WARGK,KAAKC,MAA0B,GAAnBX,EAAS,QAAY,EAAI,IAOxC,oBCfGY,WAAMC,OAAO,CACxBC,QAAS,mCC0BEC,oNAzBXC,MAAQ,CAAEC,IAAK,MAEfC,aAAe,SAACC,GACZA,EAAMC,iBAENC,EAAKtB,MAAMuB,SAASD,EAAKL,MAAMC,8EAG3B,IAAAM,EAAAC,KACJ,OACIrB,EAAAC,EAAAC,cAAA,OAAKE,UAAU,SACXJ,EAAAC,EAAAC,cAAA,QAAMiB,SAAUE,KAAKN,cACjBf,EAAAC,EAAAC,cAAA,iCACAF,EAAAC,EAAAC,cAAA,SAAOI,KAAK,OACZgB,MAAOD,KAAKR,MAAMC,IAClBS,SAAU,SAACC,GAAD,OAAOJ,EAAKK,SAAS,CAAEX,IAAKU,EAAEE,OAAOJ,SAC/CK,UAAU,IACVC,UAAU,eAlBTC,IAAMC,YCUZC,SAVA,SAACnC,GACd,OACEI,EAAAC,EAAAC,cAAA,OAAKE,UAAU,UACbJ,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,MAAI8B,QAASpC,EAAMoC,SAAnB,YCCFC,oNACJpB,MAAQ,CAAEd,KAAM,KAAMM,KAAM,KAAMC,KAAM,KAAM4B,IAAK,QAInDC,qDAAiB,SAAAC,EAAOtB,GAAP,IAAAuB,EAAA,OAAAC,EAAArC,EAAAsC,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAE,KAAA,EACQC,EAAIC,IAAI,oBAAqB,CAClDC,OAAQ,CACN/B,IAAKA,EACLgC,MAAOC,sCAJI,OACTV,EADSG,EAAAQ,KAOf9B,EAAKO,SAAS,CACZ1B,KAAMsC,EAASY,KAAKC,KAAKnD,KACzBM,KAAMgC,EAASY,KAAKE,KACpB7C,KAAM+B,EAASY,KAAKG,QAAQ,GAAGF,OAEjCG,QAAQC,IAAIjB,GAZG,wBAAAG,EAAAe,SAAAnB,EAAAf,iEA+BjBW,QAAU,WACRd,EAAKO,SAAS,CAAE1B,KAAM,KAAMM,KAAM,KAAMC,KAAM,KAAM4B,IAAK,uFAhBzD,OAAwB,OAApBb,KAAKR,MAAMd,MAAoC,OAAnBsB,KAAKR,MAAMqB,IAClClC,EAAAC,EAAAC,cAACsD,EAAD,CAAQrC,SAAUE,KAAKc,iBACpBsB,MAAMpC,KAAKR,MAAMd,MAQC,OAAnBsB,KAAKR,MAAMqB,IACblC,EAAAC,EAAAC,cAAA,WAAMmB,KAAKR,MAAMqB,UADnB,EANHlC,EAAAC,EAAAC,cAACwD,EAAD,CACE3D,KAAMsB,KAAKR,MAAMd,KACjBO,KAAMe,KAAKR,MAAMP,KACjBD,KAAMgB,KAAKR,MAAMR,wCAavB,OACEL,EAAAC,EAAAC,cAAA,OAAKE,UAAWiB,KAAKR,MAAMP,MACzBN,EAAAC,EAAAC,cAACyD,EAAD,CAAQ3B,QAASX,KAAKW,UACrBX,KAAKuC,wBA5CI/B,IAAMC,YAkDxB+B,IAASC,OAAO9D,EAAAC,EAAAC,cAAC6D,EAAD,MAASC,SAASC,cAAc","file":"static/js/main.f7831422.chunk.js","sourcesContent":["import React from 'react';\r\nimport './stylesheets/WeatherInfo.css';\r\n\r\n//allow us to get info from the weather API\r\n\r\n\r\nconst WeatherInfo = ( props ) => {\r\n    const kelvin = parseInt(props.temp, 10);\r\n\r\n    const convertKelvin = () => {\r\n        return Math.round((kelvin - 273.15) * 9/5 + 32)\r\n    }\r\n     \r\n    return (\r\n        <div id=\"weather\">\r\n            <h1 className=\"city\">{props.city}</h1>\r\n            <br/>\r\n            <p>{props.type}\r\n            <br/>\r\n            {convertKelvin()}Â°F</p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default WeatherInfo","import axios from 'axios';\r\n\r\nexport default axios.create({\r\n    baseURL: 'https://api.openweathermap.org',\r\n    \r\n});","import React from 'react';\r\nimport './stylesheets/ZipBar.css'\r\n\r\nclass ZipBar extends React.Component {\r\n    state = { zip: '' };\r\n\r\n    onFormSubmit = (event) => {\r\n        event.preventDefault();\r\n\r\n        this.props.onSubmit(this.state.zip)\r\n    };\r\n\r\n    render(){\r\n        return(\r\n            <div className=\"World\">\r\n                <form onSubmit={this.onFormSubmit}>\r\n                    <label>Enter zip code: </label>\r\n                    <input type=\"text\" \r\n                    value={this.state.zip} \r\n                    onChange={(e) => this.setState({ zip: e.target.value})}\r\n                    minLength=\"5\"\r\n                    maxLength=\"5\"\r\n                    />\r\n                </form>\r\n            </div>\r\n        ) \r\n    }\r\n}\r\n\r\nexport default ZipBar;","import React from \"react\";\r\nimport \"./stylesheets/NavBar.css\";\r\n\r\nconst NavBar = (props) => {\r\n  return (\r\n    <nav className=\"navbar\">\r\n      <ul>\r\n        <li onClick={props.onClick}>Home</li>\r\n      </ul>\r\n    </nav>\r\n  );\r\n};\r\n\r\nexport default NavBar;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport WeatherInfo from \"./WeatherInfo\";\r\nimport omw from \"./apis/weatherapi\";\r\nimport ZipBar from \"./ZipBar\";\r\nimport NavBar from \"./NavBar\";\r\nimport \"./stylesheets/index.css\";\r\n\r\nclass App extends React.Component {\r\n  state = { temp: null, city: null, type: null, err: null };\r\n\r\n  //API request to omw to gather weather data, using zip entered from ZipBar\r\n\r\n  onSearchSubmit = async (zip) => {\r\n    const response = await omw.get(\"/data/2.5/weather\", {\r\n      params: {\r\n        zip: zip,\r\n        APPID: process.env.REACT_APP_WEATHER_API_KEY\r\n      }\r\n    });\r\n    this.setState({\r\n      temp: response.data.main.temp,\r\n      city: response.data.name,\r\n      type: response.data.weather[0].main\r\n    });\r\n    console.log(response);\r\n  };\r\n\r\n  renderContent() {\r\n    if (this.state.temp === null && this.state.err === null) {\r\n      return <ZipBar onSubmit={this.onSearchSubmit} />;\r\n    } else if (!isNaN(this.state.temp)) {\r\n      return (\r\n        <WeatherInfo\r\n          temp={this.state.temp}\r\n          type={this.state.type}\r\n          city={this.state.city}\r\n        />\r\n      );\r\n    } else if (this.state.err !== null) {\r\n      return <div>{this.state.err}</div>;\r\n    }\r\n  }\r\n\r\n  onClick = () => {\r\n    this.setState({ temp: null, city: null, type: null, err: null });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className={this.state.type}>\r\n        <NavBar onClick={this.onClick} />\r\n        {this.renderContent()}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nReactDOM.render(<App />, document.querySelector(\"#root\"));\r\n"],"sourceRoot":""}